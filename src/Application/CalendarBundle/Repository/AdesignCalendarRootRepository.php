<?php

namespace Application\CalendarBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AdesignCalendarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdesignCalendarRootRepository extends EntityRepository {

     public function FindPublicCalendars() {
         $view=1;
           $query = $this->createQueryBuilder('a')
            ->where('a.isviewable = :ispublic')
            ->setParameter('ispublic', $view);
             return $query->getQuery()->getResult();
     }
    
    
    
    public function myFindAll($id_user = null, $user_groups = array()) {

        //var_dump($user_groups);

        $parameters = array();
           //$values = array('a,b,c,d');
        $values = array('a,b,d');
        $query = $this->createQueryBuilder('a')
                ->select($values)
                //   ->distinct('a.id')
                ->leftJoin('a.owner', 'b')
            //    ->leftJoin('a.groupedit', 'c')
                ->leftJoin('a.secondgroupedit', 'd')
                   ->leftJoin('d.users', 'e');
        /* ------------------------------------
         * Filtrage par user
          ----------------------------------- */

       if (isset($id_user)) {
            $query->where('b.id = :idUser')
                   ->orWhere('e.id = :idUser')
                    ->setParameter('idUser', $id_user);
        }
        /* ------------------------------------
         * Filtrage par groupes
          ----------------------------------- */

    /* if (isset($user_groups)) {
            $query->orWhere('c.id IN (:idGroupes)')
                    ->setParameter('idGroupes', $user_groups);
        }
        
        
        
            
       if (isset($id_user)) {
            $query->where('b.id = :idUser')
                    ->setParameter('idUser', $id_user);
        }

        
      if (isset($groupes)) {
            $query->orWhere('e.id IN (:idUsera)')
                    ->setParameter('idUsera', $id_user);
      }*/
        
        return $query->getQuery()->getResult();
    }

}
