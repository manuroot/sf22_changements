<?php

namespace Application\ChangementsBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use CalendR\Extension\Doctrine2\QueryHelper;
use Doctrine\ORM\EntityRepository;
use CalendR\Event\Provider\ProviderInterface;
use DoctrineExtensions\Query\Mysql\GroupConcat;
use Application\ChangementsBundle\Entity\Changements;
use Application\ChangementsBundle\Query\Mysql\AtGroupConcat;

//use CalendR\Extension\Doctrine2\EventRepository as EventRepositoryTrait;
/**
 * NotesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChangementsRepository extends EntityRepository implements ProviderInterface {

    protected $query;

    public function get_all_months() {
        return array(
            'Jan', 'Feb', 'Mar', 'Apr',
            'May', 'Jun', 'Jul', 'Aug',
            'Sep', 'Oct', 'Nov', 'Dec'
        );
    }

    /*
     * SELECT  count(id),`id_status` FROM `changements_main` group by id_status
     */

    public function getStatusForRequeteBuilder() {
        $qb = $this->createQueryBuilder('a')
                ->select('count(a.id) as nb,b.nom as status')
                ->leftjoin('a.idStatus', 'b')
                ->groupBy('b.nom');

        $status = $qb->getQuery()
                ->getScalarResult();

        return $status;
   
    }

    /*
     * TODO: ajouter les filtres
     * 
     */

    public function getProjetsForRequeteBuilder() {
        $query = $this->createQueryBuilder('a')
                ->select('distinct b.id,b.nomprojet')
                //   ->from('Application\ChangementsBundle\Entity\Changements', 'a')
                ->leftJoin('a.idProjet', 'b')
                ->groupBy('b.id')
                ->add('orderBy', 'b.nomprojet ASC');

        $choices = array();
        $arr = $query->getQuery()->getArrayResult();
        foreach ($arr as $result) {
            $choices[$result['id']] = $result['nomprojet'];
        }
        return $choices;
    }

    public function getDemandeursForRequeteBuilder() {
        $query = $this->createQueryBuilder('a')
                ->select('distinct b.id,b.nomUser')
                ->leftJoin('a.demandeur', 'b')
                ->groupBy('b.id')
                ->add('orderBy', 'b.nomUser ASC');
        $choices = array();
        $arr = $query->getQuery()->getArrayResult();
        foreach ($arr as $result) {
            $choices[$result['id']] = $result['nomUser'];
        }
        return $choices;
    }

    public function getProjetForRequeteBuilderc() {
        $query = $this->createQueryBuilder('a')
                // $qb = $em->createQueryBuilder() ->select('u') ->from('User', 'u')
                ->add('select', 'b')
                ->select('partial b.{id,nomprojet}')
                ->leftJoin('a.idProjet', 'b')
                ->groupBy('b.id')
                ->add('orderBy', 'b.nomprojet ASC')
        ;
        return $query;
    }

    public function myFindaIdAll($id) {
        $parameters = array();
        $values = array('a,partial b.{id,nomprojet},partial c.{id,nomUser},partial d.{id,nom,description},f,h');

        $query = $this->createQueryBuilder('a')
                ->select($values)
                ->leftJoin('a.idProjet', 'b')
                ->leftJoin('a.demandeur', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->leftJoin('a.picture', 'f')
                ->addSelect('g')
                //->addSelect('g')
                ->distinct('GroupConcat(g.nom) AS kak')
                ->leftJoin('a.idEnvironnement', 'g')
                ->leftJoin('a.comments', 'h')
                //->addSelect('e')
                ->addSelect('partial e.{id,nomUser}')
                ->distinct('GroupConcat(e.nomUser)')
                ->leftJoin('a.idusers', 'e');
        $query->add('orderBy', 'a.id DESC')
                ->andwhere('a.id = :myid');
        $query->setParameter('myid', $id);


        return $query->getQuery()->getSingleResult();
    }

    public function myFindAll($criteria = array()) {

        $parameters = array();
        $values = array('a,partial b.{id,nomprojet},partial c.{id,nomUser},partial d.{id,nom,description},f,partial h.{id}');
        $query = $this->createQueryBuilder('a')
                ->select($values)
                ->distinct('a.id')
                // ->addGroupBy('a.id')
                ->leftJoin('a.idProjet', 'b')
                ->leftJoin('a.demandeur', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->leftJoin('a.picture', 'f')
                ->addSelect('g')
                //    ->distinct('GroupConcat(g.nom) AS kak')
                ->leftJoin('a.idEnvironnement', 'g')
                ->leftJoin('a.comments', 'h')
                //->addSelect('e')
                ->addSelect('partial e.{id,nomUser}')
                // ->distinct('GroupConcat(e.nomUser)')
                ->leftJoin('a.idusers', 'e');


        $this->query = $query;
        if (!empty($criteria)) {
            $query = $this->getListBy($criteria);
        }
        $query->add('orderBy', 'a.id DESC');
        //$query->add('orderBy', "$sort $dir");
        return $query;
        //->getQuery();
    }

    public function findAjaxValue($criteria) {
        $parameters = array();
        $query = $this->createQueryBuilder('a');
        // Supprimer champs qui ne sont pas dans la classe
        foreach ($criteria as $field => $value) {
            if (!$this->getClassMetadata()->hasField($field)) {
                // Make sure we only use existing fields (avoid any injection)
                unset($criteria[$field]);
                // continue;
            }
        }
        //les like
        $like_arrays = array('nom', 'description', 'ticketExt', 'ticketInt');
        foreach ($like_arrays as $val) {
            // echo "val=$val<br>";
            if (isset($criteria[$val]) && !preg_match('/^\s*$/', $criteria[$val])) {
                $query->andWhere("a.$val LIKE :$val");
                $parameters[$val] = '%' . $criteria[$val] . '%';
            }
        }
        $query->setParameters($parameters);
        return $query;
    }

    // TODO REGEX
    private function getListBy($criteria) {

        // $query = $this->myFindsimpleAll();
        $query = $this->query;
        $parameters = array();
        //return $query;
        if (isset($criteria['idEnvironnement']) && $criteria['idEnvironnement'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('g.id IN (:idEnv)');
            //  $query->distinct('GroupConcat(g.nom) AS kak');
            $parameters['idEnv'] = $criteria['idEnvironnement'];
        }
        if (isset($criteria['user_favoris']) && $criteria['user_favoris'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('i.id IN (:idFavoris)');
            //  $query->distinct('GroupConcat(g.nom) AS kak');
            $parameters['idFavoris'] = $criteria['user_favoris'];
        }



        if (isset($criteria['demandeur']) && $criteria['demandeur'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('c.id = (:idUser)');
            $parameters['idUser'] = $criteria['demandeur'];
        }

        if (isset($criteria['idProjet']) && $criteria['idProjet'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('b.id IN (:idProjet)');
            //  $query->distinct('GroupConcat(d.nomprojet) AS projet');
            $parameters['idProjet'] = $criteria['idProjet'];
        }
        if (isset($criteria['idStatus']) && $criteria['idStatus'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('d.id IN (:idStatus)');
            // $query->distinct('GroupConcat(d.nom) AS status');
            $parameters['idStatus'] = $criteria['idStatus'];
        }

        if (isset($criteria['idusers']) && $criteria['idusers'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('e.id IN (:idUsers)');
            //   $query->distinct('GroupConcat(e.nomUser)');
            $parameters['idUsers'] = $criteria['idusers'];
        }



        if ($criteria['dateDebut_max'] == $criteria['dateDebut'] && $criteria['dateDebut'] != "") {
            $query->andWhere('a.dateDebut LIKE :datedebut');
            $parameters['datedebut'] = '%' . $criteria['dateDebut'] . '%';

            /*  ->where('a.dateDebut LIKE :madate')
              ->setParameter('madate', '%' . $criteria['dateDebut'] . '-%') */
        } else {

            if (isset($criteria['dateDebut']) && $criteria['dateDebut'] != "") {
                $query->andWhere('a.dateDebut >= (:datedebut)');
                $parameters['datedebut'] = $criteria['dateDebut'];
            }

            if (isset($criteria['dateDebut_max']) && $criteria['dateDebut_max'] != "") {
                $query->andWhere('a.dateDebut <= (:datedebut_max)');
                $parameters['datedebut_max'] = $criteria['dateDebut_max'];
            }
        }
        if (isset($criteria['dateFin']) && $criteria['dateFin'] != "") {
            $query->andWhere('a.dateFin >= (:dateFin)');
            $parameters['dateFin'] = $criteria['dateFin'];
        }
        if (isset($criteria['dateFin_max']) && $criteria['dateFin_max'] != "") {
            $query->andWhere('a.dateFin <= (:dateFin_max)');
            $parameters['dateFin_max'] = $criteria['dateFin_max'];
        }

        if (isset($criteria['byid'])) {
            $query->andWhere('a.id = :myid');
            // ->groupby('a.name');
            $parameters['myid'] = (string) $criteria['byid'];
        }
        // Supprimer champs qui ne sont pas dans la classe
        foreach ($criteria as $field => $value) {
            if (!$this->getClassMetadata()->hasField($field)) {
                // Make sure we only use existing fields (avoid any injection)
                unset($criteria[$field]);
                // continue;
            }
        }
        //les like
        $like_arrays = array('nom', 'description', 'ticketExt', 'ticketInt');
        foreach ($like_arrays as $val) {
            // echo "val=$val<br>";
            if (isset($criteria[$val]) && !preg_match('/^\s*$/', $criteria[$val])) {

                // if (isset($criteria[$val]) && ! preg_match('/[\s]+/',$criteria[$val])) {
                // echo "critere=" . $criteria["$val"] . "<br>";
                $query->andWhere("a.$val LIKE :$val");

                $parameters[$val] = '%' . $criteria[$val] . '%';
            }
        }



        $query->setParameters($parameters);


        return $query;
        //->getQuery();
    }

    public function sum_appli_year($year = null) {

        $c_year = $this->mydate($year);
        /*  $current_date = new \DateTime();
          if (!isset($year)) {
          $year = $current_date->format('Y');
          } */
        $query = $this->createQueryBuilder('a')
                ->select('count(a.id) as nb,b.nomprojet,MONTH(a.dateDebut) as mois')
                ->leftJoin('a.idProjet', 'b')
                ->andWhere('a.dateDebut LIKE :date')
                ->groupby('b.nomprojet');

        // pkoi 2 ??
        $parameters['date'] = '%' . $c_year . '-%';
        // echo "year=" . $parameters['date'] . "<br>";
        $query->setParameters($parameters);

        // Pour faire des %
        $qa = $this->createQueryBuilder('a')->select('COUNT(a.id)')
                ->where('a.dateDebut LIKE :madate')
                ->setParameter('madate', '%' . $c_year . '-%')
                ->getQuery()
                ->getSingleScalarResult();
        $datas = array();
        foreach ($query->getQuery()->getScalarResult() as $valeur) {
            // echo "qa=$qa " . $valeur['nomprojet'] . "=" . $valeur['nb'] . "<br>";
// echo $valeur['nomprojet'] . "--" . $valeur['mois'] . "<br>";
            array_push($datas, array($valeur['nomprojet'], round(($valeur['nb'] / $qa) * 100)));
        }
        // exit(1);
        // print_r($datas);
        return $datas;
    }

    public function sum_demandeur_year($year = null) {

        $c_year = $this->mydate($year);

        /*  $current_date = new \DateTime();
          if (!isset($year)) {
          $year = $current_date->format('Y');
          } */
        $query = $this->createQueryBuilder('a')
                ->select('count(a.id) as nb,b.nomUser,MONTH(a.dateDebut) as mois')
                ->leftJoin('a.demandeur', 'b')
                ->andWhere('a.dateDebut LIKE :date')
                ->groupby('b.nomUser');
        $parameters['date'] = '%' . $c_year . '-%';
        // echo "year=" . $parameters['date'] . "<br>";
        $query->setParameters($parameters);

        $qa = $this->createQueryBuilder('a')->select('COUNT(a.id)')
                ->where('a.dateDebut LIKE :madate')
                ->setParameter('madate', '%' . $c_year . '-%')
                ->getQuery()
                ->getSingleScalarResult();
        $datas = array();
        foreach ($query->getQuery()->getScalarResult() as $valeur) {
            // echo $valeur['nomprojet'] . "--" . $valeur['mois'] . "<br>";
            array_push($datas, array($valeur['nomUser'], round(($valeur['nb'] / $qa) * 100)));
        }
        // exit(1);
        // print_r($datas);
        return $datas;
    }

    public function sum_group_year($year = null) {

        $c_year = $this->mydate($year);

        /*  $current_date = new \DateTime();
          if (!isset($year)) {
          $year = $current_date->format('Y');
          } */
        $query = $this->createQueryBuilder('a')
                ->select('count(a.id) as nb,c.nomGroup,MONTH(a.dateDebut) as mois')
                ->leftJoin('a.demandeur', 'b')
                ->leftJoin('b.idgroup', 'c')
                ->andWhere('a.dateDebut LIKE :date')
                ->groupby('c.nomGroup');
        $parameters['date'] = '%' . $c_year . '-%';
        // echo "year=" . $parameters['date'] . "<br>";
        $query->setParameters($parameters);

        $qa = $this->createQueryBuilder('a')->select('COUNT(a.id)')
                ->where('a.dateDebut LIKE :madate')
                ->setParameter('madate', '%' . $c_year . '-%')
                ->getQuery()
                ->getSingleScalarResult();
        $datas = array();
        foreach ($query->getQuery()->getScalarResult() as $valeur) {
            // echo $valeur['nomprojet'] . "--" . $valeur['mois'] . "<br>";
            array_push($datas, array($valeur['nomGroup'], round(($valeur['nb'] / $qa) * 100)));
        }

        /* print_r($datas);
          exit(1); */
        return $datas;
    }

    public function getNbTopicParForums() {
        $qb = $this->createQueryBuilder('f')
                ->join('f.topics', 't')
                ->addSelect('COUNT(t)')
                ->groupBy('f.id');

        $entites = $qb->getQuery()
                ->getScalarResult();

        foreach ($entites as $valeur) {
            return $valeur;
        }
    }

    private function mydate($year = null) {
        $current_date = new \DateTime();
        if (!isset($year)) {
            $year = $current_date->format('Y');
        }
        return $year;
    }

    public function GetYears() {

        $result = array();
        $query = $this->createQueryBuilder('a')
                        ->select('YEAR(a.dateDebut) as year,count(a.id) as nb')
                        ->groupby('year')->orderBy('year');
        $arr = $query->getQuery()->getArrayResult();

        foreach ($arr as $k => $v) {
            if ($v['year']) {
                if (isset($v['nb']) && $v['nb'] > 0) {
                    if (isset($v['year']) && preg_match("/^2[0-9]{3}$/", $v['year'])) {
                        array_push($result, $v['year']);
                    }
                }
            }
        }
        ///  print_r($result);exit(1);
        return $result;
    }

    public function sum_allappli_bymonthyear($year = null) {
        $c_year = $this->mydate($year);
        /* $current_date = new \DateTime();
          if (!isset($year)) {
          $year = $current_date->format('Y');
          } */
        $query = $this->createQueryBuilder('a')
                //->select('MONTH(a.dateDebut) as mois,sum(b.nomprojet) as projet,count(a.id) as nb')
                ->select('MONTH(a.dateDebut) as mois,count(a.id) as nb')
                //->select('count(a.id) as nb,a.dateDebut,b.nomprojet,MONTH(a.dateDebut) as mois')
                ->leftJoin('a.idProjet', 'b')
                ->andWhere('a.dateDebut LIKE :date')
                ->groupby('mois');
        $parameters['date'] = '%' . $c_year . '-%';
        $query->setParameters($parameters);
        //return $query->getQuery();
        return $query->getQuery();
    }

    public function sum_appli_monthyear($year = null) {

        $c_year = $this->mydate($year);

        /* $current_date = new \DateTime();
          if (!isset($year)) {
          $year = $current_date->format('Y');
          } */
        $query = $this->createQueryBuilder('a')
                ->select('MONTH(a.dateDebut) as mois,b.nomprojet as projet,count(a.id) as nb')
                //->select('count(a.id) as nb,a.dateDebut,b.nomprojet,MONTH(a.dateDebut) as mois')
                ->leftJoin('a.idProjet', 'b')
                ->andWhere('a.dateDebut LIKE :date')
                ->groupby('mois,projet');
        $parameters['date'] = '%' . $c_year . '-%';
        // echo "year=" . $parameters['date'] . "<br>";
        $query->setParameters($parameters);
        return $query->getQuery();
    }

    public function getJoinedBy($sort = 'a.id', $dir = 'DESC', $criteria = array()) {

        $parameters = array();
        $values = array('DISTINCT a,partial b.{id,nomprojet},partial c.{id,nomUser},partial d.{id,nom,description},partial f.{id},partial h.{id}');
        $query = $this->createQueryBuilder('a')
                ->select($values)
                ->leftJoin('a.idProjet', 'b')
                ->leftJoin('a.demandeur', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->leftJoin('a.picture', 'f')
                ->addSelect('partial g.{id,nom}')
                ->leftJoin('a.idEnvironnement', 'g')
                ->addSelect('partial i.{id,username}')
                ->leftJoin('a.idfavoris', 'i')
                ->leftJoin('a.comments', 'h')
                ->addSelect('partial e.{id,nomUser}')
                //->addSelect('partial e.{id,nomUser}')
                ->leftJoin('a.idusers', 'e');


        $this->query = $query;
        if (!empty($criteria)) {
            $query = $this->getListBy($criteria);
        }
//if (! isset($sort)){
        //  $query->groupBy('a.idStatus');
        // $query->add('orderBy', "a.idStatus $dir");
        //        }
        $query->add('orderBy', "$sort $dir");


        // }

        return $query->getQuery();
    }

    public function getSimpleCountedJoinedBy() {
        $query = $query = $this->_em->createQuery("
            SELECT  COUNT(a.id) FROM ApplicationChangementsBundle:Changements a 
             
          "
        );

        return $query->getSingleResult();
    }

    public function getCountedJoinedBy() {
        $query = $query = $this->_em->createQuery("
            SELECT  COUNT(a.id) FROM ApplicationChangementsBundle:Changements a 
              LEFT JOIN a.idusers e
          "
        );
        return $query->getSingleResult();
    }

    public function getEventsQueryBuilder(\DateTime $begin, \DateTime $end, array $options = array()) {

        $parameters = array();
        $values = array('DISTINCT e,partial f.{id,nomprojet},partial c.{id,nomUser},partial d.{id,nom,description}');
        $query = $this->createQueryBuilder('e')
                ->select($values)
                ->leftJoin('e.idProjet', 'f')
                ->leftJoin('e.demandeur', 'c')
                ->leftJoin('e.idStatus', 'd');

        if (isset($options['idStatus']) && $options['idStatus'] != "") {
            // var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('d.id IN (:idStatus)');
            // $query->distinct('GroupConcat(d.nom) AS status');
            $parameters['idStatus'] = $options['idStatus'];
        }

        $query->setParameters($parameters);
        /*
          $query = $this->createQueryBuilder('e');
         */

        //    $this->query = $query;
        /*  if (!empty($options)) {
          $query = $this->getListBy($options);
          } */
        return QueryHelper::addEventQuery($query, 'e.dateDebut', 'e.dateFin', $begin, $end)
                        ->getQuery()
                        ->getResult();
        ;
    }

    public function getEvents(\DateTime $begin, \DateTime $end, array $options = array()) {
        // echo "getEvents query";exit(1);
        return $this->getEventsQueryBuilder($begin, $end, $options);
    }

    public function getMyDate($date) {
        $myarr = array();
        $s_arr = array();
        //     echo "date=$date";exit(1);
        $qb = $this->createQueryBuilder('a')
                ->select('a.id,a.dateDebut,a.nom')
                ->where('a.dateDebut LIKE :mydate')
                ->setParameter('mydate', "%" . $date . "%");
        // return $qb->getQuery()->getResult();

        foreach ($qb->getQuery()->getResult() as $d) {
            /* $year = $d['createdAt']->format('Y');
              $month = $d['createdAt']->format('m');
              $day = $d['createdAt']->format('d'); */
            $value = $d['dateDebut']->format('m\/d\/Y');
            $name = $d['nom'];
            $id = $d['id'];


            if (array_key_exists("$value", $s_arr)) {
                $s_arr["$value"] .= "id=$id : $name\n";
            } else {
                //echo "pas fdddfd"; 
                $s_arr["$value"] = "id=$id : $name" . "\n";
            }

            //  array_push($myarr,array('date'=>"$value",'title'=>"gfddfgdf " . $name));
            //array_key_exists($key, $myarr))
            /* if (in_array($value, $myarr[]['date'])) {
              }
              else
              {
              array_push($myarr,array('date'=>"$value",'title'=> $name));
              }} */
        }
        foreach ($s_arr as $key => $value) {
            array_push($myarr, array('date' => $key, 'title' => $value));
        }
        //  $myarr=array($s_arr);    
        //return ($myarr);
        //     print_r($myarr);
        return ($myarr);
        // print_r($myarr);
    }

}
