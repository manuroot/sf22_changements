<?php

namespace Application\ChangementsBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NotesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocchangementsRepository extends EntityRepository {

    public function myFindoldAll() {
        return $this->createQueryBuilder('a')
                        ->getQuery();

        //->getResult();
    }
 public function myFindAll() {
      //  return $this->createQueryBuilder('a')
        /*                ->leftJoin('a.idchangement', 'b')
                ->orderBy('a.id', 'DESC')
                        //   ->leftJoin('a.demandeur', 'c')
                        ->getQuery();
    }*/
 
        $query = $this->createQueryBuilder('a')
                ->select('a,b')
                ->add('orderBy', 'a.id DESC')
                ->leftJoin('a.idchangement', 'b');
                //  ->leftJoin($join, $alias, $conditionType)
              
        ;
        return $query->getQuery();

}

  // TODO REGEX
    public function getListBy($criteria) {

         $query = $this->createQueryBuilder('a')
                ->select('a,b')
                ->add('orderBy', 'a.id DESC')
                ->leftJoin('a.idchangement', 'b');
        $parameters = array();

        if (isset($criteria['idchangements']) && $criteria['idchangements'] != "") {
            //       var_dump($criteria['idEnvironnement']);exit(1);
            $query->andWhere('b.id IN (:idchangements)');
            $query->distinct('GroupConcat(b.nom) AS kak');
            $parameters['idchangements'] = $criteria['idchangements'];
        }
       
        
     
        if (isset($criteria['updatedAt']) && $criteria['updatedAt'] != "") {
            $query->andWhere('a.updatedAt > (:updatedAt)');
            $parameters['updatedAt'] = $criteria['updatedAt'];
        }
           if (isset($criteria['updatedAt_max']) && $criteria['updatedAt_max'] != "") {
            $query->andWhere('a.updatedAt < (:updatedAt_max)');
            $parameters['updatedAt_max'] = $criteria['updatedAt_max'];
        }
        
        
        
        // Supprimer les autres champs qui ne sont pas dans la classe
        foreach ($criteria as $field => $value) {
            if (!$this->getClassMetadata()->hasField($field)) {
                // Make sure we only use existing fields (avoid any injection)
                unset($criteria[$field]);
                //  continue;
            }
        }

        //les like
        $like_arrays = array('nom', 'md5','OriginalFilename', 'path');
        foreach ($like_arrays as $val) {
            //  echo "val=$val<br>";
            if (isset($criteria[$val]) && !preg_match('/^\s*$/', $criteria[$val])) {

                //   if (isset($criteria[$val]) && ! preg_match('/[\s]+/',$criteria[$val])) {
                //      echo "critere=" . $criteria["$val"] . "<br>";
                $query->andWhere("a.$val LIKE :$val");

                $parameters[$val] = '%' . $criteria[$val] . '%';
            }
        }

        $query->setParameters($parameters);


        return $query;
    }
}